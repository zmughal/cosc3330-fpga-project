<!DOCTYPE 
    HTML PUBLIC 
    "-//W3C//DTD HTML 4.01 Transitional//EN" 
    "http://www.w3.org/TR/html4/loose.dtd"
    >
<html>
<head>
<title>SN76489 - Development - SMS Power!</title>
<meta http-equiv='Content-Type' content='text/html; charset=utf-8' />
<link rel='stylesheet' title='Styled' href='../pub/skins/smspower/smspower.css?sid=2b8ee483b184ecd129938536061a6c98' type='text/css' />
<!--HTMLHeader--><style type='text/css'><!--
  ul, ol, pre, dl, p { margin-top:0px; margin-bottom:0px; }
  code.escaped { white-space: nowrap; }
  .vspace { margin-top:1.33em; }
  .indent { margin-left:40px; }
  .outdent { margin-left:40px; text-indent:-40px; }
  a.createlinktext { text-decoration:none; border-bottom:1px dotted gray; }
  a.createlink { text-decoration:none; position:relative; top:-0.5em;
    font-weight:bold; font-size:smaller; border-bottom:none; }
  img { border:0px; }
  .editconflict { color:green; 
  font-style:italic; margin-top:1.33em; margin-bottom:1.33em; }

  table.markup { border:2px dotted #ccf; width:90%; }
  td.markup1, td.markup2 { padding-left:10px; padding-right:10px; }
  table.vert td.markup1 { border-bottom:1px solid #ccf; }
  table.horiz td.markup1 { width:23em; border-right:1px solid #ccf; }
  table.markup caption { text-align:left; }
  div.faq p, div.faq pre { margin-left:2em; }
  div.faq p.question { margin:1em 0 0.75em 0; font-weight:bold; }
  div.faqtoc div.faq * { display:none; }
  div.faqtoc div.faq p.question 
    { display:block; font-weight:normal; margin:0.5em 0 0.5em 20px; line-height:normal; }
  div.faqtoc div.faq p.question * { display:inline; }
   
    .frame 
      { border:1px solid #cccccc; padding:4px; background-color:#f9f9f9; }
    .lfloat { float:left; margin-right:0.5em; }
    .rfloat { float:right; margin-left:0.5em; }
a.varlink { text-decoration:none; }
/**
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 */
.c  {font-family:monospace;}
.c .imp {font-weight: bold; color: red;}
.c .kw1 {color: #b1b100;}
.c .kw2 {color: #000000; font-weight: bold;}
.c .kw3 {color: #000066;}
.c .kw4 {color: #993333;}
.c .co1 {color: #666666; font-style: italic;}
.c .co2 {color: #339933;}
.c .coMULTI {color: #808080; font-style: italic;}
.c .es0 {color: #000099; font-weight: bold;}
.c .es1 {color: #000099; font-weight: bold;}
.c .es2 {color: #660099; font-weight: bold;}
.c .es3 {color: #660099; font-weight: bold;}
.c .es4 {color: #660099; font-weight: bold;}
.c .es5 {color: #006699; font-weight: bold;}
.c .br0 {color: #009900;}
.c .sy0 {color: #339933;}
.c .st0 {color: #ff0000;}
.c .nu0 {color: #0000dd;}
.c .nu6 {color: #208080;}
.c .nu8 {color: #208080;}
.c .nu12 {color: #208080;}
.c .nu16 {color:#800080;}
.c .nu17 {color:#800080;}
.c .nu18 {color:#800080;}
.c .nu19 {color:#800080;}
.c .me1 {color: #202020;}
.c .me2 {color: #202020;}
.c span.xtra { display:block; }

.sourceblocklink {
  text-align: right;
  font-size: smaller;
}
.sourceblocktext {
  padding: 0.5em;
  border: 1px solid #808080;
  color: #000000;
  background-color: #f1f0ed;
}
.sourceblocktext div {
  font-family: monospace;
  font-size: small;
  line-height: 1;
  height: 1%;
}
.sourceblocktext div.head,
.sourceblocktext div.foot {
  font: italic medium serif;
  padding: 0.5em;
}

--></style><meta http-equiv='Content-Type' content='text/html; charset=utf-8' /><script type='text/javascript' src="../pub/scalefix.js"></script><script type='text/javascript' src='../pub/mojozoom.js'></script><link type='text/css' href='../pub/mojozoom.css' rel='stylesheet' />
<link rel='stylesheet' type='text/css' href='../pub/attachtable/attachtable.css' /><script src="../pub/nicetitle.js"></script><link type='text/css' href='../pub/nicetitle.css' rel='stylesheet' />  <meta name='robots' content='index,follow' />
<link rel="stylesheet" href="../pub/slimtoc/slimtoc.css" type="text/css" /><script type="text/javascript">
function toggleToc(obj) {
    var elstyle = document.getElementById(obj).style;
    var text    = document.getElementById(obj + "tog");
    if (elstyle.display == 'none') {
        elstyle.display = 'block';
        text.innerHTML = '<span>&minus;</span>';
        text.className='toc_close';
    } else {
        elstyle.display = 'none';
        text.innerHTML = '<span>+</span>';
        text.className='toc_open';
    }
}
</script>
</head>
<body>
	<div id='wrap' class='clearfix'>
<!--PageHeaderFmt-->
		<div id='header'>
			<table width='100%'><tr>
			<td align='left' valign='middle'>
				<h1><a href='http://www.smspower.org?sid=2b8ee483b184ecd129938536061a6c98'><div><img src='../uploads/Site/logo.png' alt='SMS Power!' title='SMS Power!' /></div>
</a></h1>
			</td><td align='center' valign='middle'>
				<div class='nowrap' style='text-align: center;' > 
<h2><a class='wikilink' href='http://www.smspower.org/Development/Index?sid=2b8ee483b184ecd129938536061a6c98'>Development</a></h2>
<p><span style='font-size:83%'>Sega Master System / Mark III / Game Gear<br />SG-1000 / SC-3000 / SF-7000 / OMV</span>
</p></div>

			</td><td align='right' valign='top'>
				<p><a name='top' id='top'></a>
<a class='wikilink' href='http://www.smspower.org/?sid=2b8ee483b184ecd129938536061a6c98'>Home</a> - <a class='wikilink' href='http://www.smspower.org/forums/'>Forums</a> - <a class='wikilink' href='http://www.smspower.org/Games/Index?sid=2b8ee483b184ecd129938536061a6c98'>Games</a> - <a class='wikilink' href='http://www.smspower.org/Scans/Index?sid=2b8ee483b184ecd129938536061a6c98'>Scans</a> - <a class='wikilink' href='http://www.smspower.org/Maps/Index?sid=2b8ee483b184ecd129938536061a6c98'>Maps</a> - <a class='wikilink' href='http://www.smspower.org/Cheats/Index?sid=2b8ee483b184ecd129938536061a6c98'>Cheats</a><br /><a class='wikilink' href='http://www.smspower.org/Music/Index?sid=2b8ee483b184ecd129938536061a6c98'>Music</a> - <a class='wikilink' href='http://www.smspower.org/Videos/Index?sid=2b8ee483b184ecd129938536061a6c98'>Videos</a> - <a class='wikilink' href='http://www.smspower.org/Development/Index?sid=2b8ee483b184ecd129938536061a6c98'>Development</a> - <a class='wikilink' href='http://www.smspower.org/Translations/Index?sid=2b8ee483b184ecd129938536061a6c98'>Translations</a> - <a class='wikilink' href='http://www.smspower.org/Homebrew/Index?sid=2b8ee483b184ecd129938536061a6c98'>Homebrew</a>
</p><form action='http://www.smspower.org/Development/SN76489?sid=2b8ee483b184ecd129938536061a6c98' method='get'><input type='hidden' name='action' value='search' /><input type='search' name='q' value='' size='40' /><input type='submit' name='' value='Search' class='inputbutton' /><input type='checkbox' name='group' value='Development' id='group' /><label for='group'>Development only</label></form>
<div  id='menubar' > 
<ul><li><a class='wikilink' href='http://www.smspower.org/forums/login.php?redirect=redirect.php%3fn%3dDevelopment/SN76489'>Login</a>
</li><li><a class='forumtopiclink' href='http://www.smspower.org/forums/viewtopic.php?t=12440&amp;sid=2b8ee483b184ecd129938536061a6c98'>Report an error</a>
</li><li><a rel='nofollow'  class='wikilink' href='http://www.smspower.org/Development/SN76489?action=print&amp;sid=2b8ee483b184ecd129938536061a6c98'>Print</a>
</li><li><a class='wikilink' href='http://www.smspower.org/Development/SN76489?setlang=en&amp;sid=2b8ee483b184ecd129938536061a6c98'><img src='../uploads/Site/en.png' alt='english' title='english' /></a> <a class='wikilink' href='http://www.smspower.org/Development/SN76489?setlang=ja&amp;sid=2b8ee483b184ecd129938536061a6c98'><img src='../uploads/Site/ja.png' alt='日本語' title='日本語' /></a> <a class='wikilink' href='http://www.smspower.org/Development/SN76489?setlang=pt-br&amp;sid=2b8ee483b184ecd129938536061a6c98'><img src='../uploads/Site/pt-br.png' alt='português brasileiro' title='português brasileiro' /></a> 
</li></ul></div>

			</td></tr></table>
			<div class='frame' style='text-align: center; font-weight: bold;' > 
<p><a class='forumlink' href='http://www.smspower.org/forums/viewforum.php?f=9&amp;sid=2b8ee483b184ecd129938536061a6c98'>SMS Power! 16th Anniversary Competitions</a> are now running! Listen, play, vote!
</p></div>
<div class='vspace'></div>

<!--PageTitleFmt-->
			<h2 class='pagetitle'>SN76489</h2>

<!--/PageTitleFmt-->
			<hr/>
		</div>
<!--/PageHeaderFmt-->
		<!--PageText-->
<div id='wikitext'>
<div class='toc'>
<div style='cursor: pointer;' class='tocheader' onclick="javascript:toggleToc('tocid1');"><span style='cursor: pointer;' id="tocid1tog" class='toc_close'><span>+</span></span><a name='toc1' id='toc1'></a>Contents
</div>
<div class='toclist' id='tocid1'>
<ul><li><a href='SN76489#Introduction'>Introduction</a>
</li><li><a href='SN76489#SN76489Sightings'>SN76489 sightings</a>
</li><li><a href='SN76489#AccessingTheSN76489FromSoftware'>Accessing the SN76489 from software</a>
</li><li><a href='SN76489#SN76489Registers'>SN76489 registers</a>
<ul><li><a href='SN76489#SN76489RegisterWrites'>SN76489 register writes</a>
</li></ul></li><li><a href='SN76489#HowTheSN76489MakesSound'>How the SN76489 makes sound</a>
<ul><li><a href='SN76489#ToneChannels'>Tone channels</a>
<ul><li><a href='SN76489#ToneRange'>Tone range</a>
</li></ul></li><li><a href='SN76489#NoiseChannel'>Noise channel</a>
<ul><li><a href='SN76489#TheLinearFeedbackShiftRegister'>The Linear Feedback Shift Register</a>
</li><li><a href='SN76489#OutputInversion'>Output inversion</a>
</li><li><a href='SN76489#AnImplementationOfTheNoiseShiftRegister'>An implementation of the noise shift register</a>
</li></ul></li><li><a href='SN76489#Volumeattenuation'>Volume/attenuation</a>
</li></ul></li><li><a href='SN76489#TheImperfectSN76489'>The imperfect SN76489</a>
<ul><li><a href='SN76489#EmulatingImperfection'>Emulating imperfection</a>
</li></ul></li><li><a href='SN76489#PlayingSamplesOnThePSG'>Playing samples on the PSG</a>
<ul><li><a href='SN76489#PulseCodeModulation'>Pulse Code Modulation</a>
<ul><li><a href='SN76489#AdvancedPCM'>"Advanced" PCM</a>
</li></ul></li><li><a href='SN76489#PulseWidthModulation'>Pulse Width Modulation</a>
</li></ul></li><li><a href='SN76489#GameGearStereoExtension'>Game Gear stereo extension</a>
</li></ul></div></div>
<div class='vspace'></div><h2><a name='Introduction' id='Introduction'></a> <a name='intro' id='intro'></a>Introduction</h2>
<p>This page describes the Programmable Sound Generators based on the SN76489 family of devices. They are almost all identical but produce very different output.
</p>
<div class='vspace'></div><h2><a name='SN76489Sightings' id='SN76489Sightings'></a> <a name='sightings' id='sightings'></a>SN76489 sightings</h2>
<p>The SN76489AN discrete chip is used in Sega's <a class='createlinktext' rel='nofollow' title='Create page' href='http://www.smspower.org/Hardware/SG-1000?sid=2b8ee483b184ecd129938536061a6c98'>SG-1000</a> Mark I and II,
and <a class='createlinktext' rel='nofollow' title='Create page' href='http://www.smspower.org/Hardware/SC-3000?sid=2b8ee483b184ecd129938536061a6c98'>SC-3000</a> machines, and the <a class='createlinktext' rel='nofollow' title='Create page' href='http://www.smspower.org/Hardware/OthelloMultivision?sid=2b8ee483b184ecd129938536061a6c98'>Othello Multivision</a> clone. I do not know if the <a class='createlinktext' rel='nofollow' title='Create page' href='http://www.smspower.org/Hardware/MarkIII?sid=2b8ee483b184ecd129938536061a6c98'>Mark III</a> has a discrete chip
or not. The Sega <a class='createlinktext' rel='nofollow' title='Create page' href='http://www.smspower.org/Hardware/MasterSystem?sid=2b8ee483b184ecd129938536061a6c98'>Master System</a> and <a class='createlinktext' rel='nofollow' title='Create page' href='http://www.smspower.org/Hardware/GameGear?sid=2b8ee483b184ecd129938536061a6c98'>Game Gear</a> have it integrated into
their <a class='createlinktext' rel='nofollow' title='Create page' href='http://www.smspower.org/Development/VDP?sid=2b8ee483b184ecd129938536061a6c98'>VDP</a> chips, for backward compatibility to varying extents.
</p>
<p class='vspace'>The <a class='createlinktext' rel='nofollow' title='Create page' href='http://www.smspower.org/Hardware/MegaDrive?sid=2b8ee483b184ecd129938536061a6c98'>Mega Drive</a> integrates it into its VDP, although it is often then
referred to as an SN76496. It was included to allow for the system's
Master System backwards compatibility mode, but was also commonly used
because it provides sounds that are impossible to create using the
system's main FM synthesis sound hardware (YM2612).
</p>
<p class='vspace'>It is used on many of Acorn's BBC and "Business Computer" computers such as the <a class='wikipedialink' href='http://en.wikipedia.org/wiki/BBC_Micro' title="BBC Micro on Wikipedia">BBC Micro</a>.
</p>
<p class='vspace'>The <a class='wikipedialink' href='http://en.wikipedia.org/wiki/Colecovision' title="Colecovision on Wikipedia">Colecovision</a> uses it too, as a discrete chip as the
Colecovision has virtually no custom chips. The <a class='wikipedialink' href='http://en.wikipedia.org/wiki/Coleco_Adam' title="Coleco Adam on Wikipedia">Coleco Adam</a> presumably
has one too.
</p>
<p class='vspace'>Furthermore, it is present in the <a class='urllink' href='http://www.old-computers.com/museum/computer.asp?st=1&amp;c=217' rel='nofollow'>Sord M5</a>, sold by Takara in Japan and by several others in Europe. Several Memotech home micro computers, such as the MTX-512, included the chip. The SN76489 was also used in a modified form, with the designation changed to TMS9919 to fit in the 99xx series (from which the SC-3000 VDP comes as well), in the <a class='wikipedialink' href='http://en.wikipedia.org/wiki/Texas%20Instruments%20TI-99/4A' title="TI-99/4A on Wikipedia">TI-99/4A</a>.
</p>
<p class='vspace'>Other computers <a class='urllink' href='http://www.machine-room.org/xref.php?p=SNCHIP' rel='nofollow'>thought to use the chip</a> are:
</p><ul><li>Hanimex Pencil
</li><li>Video Technology CreatiVision
</li></ul><p class='vspace'>It is undoubtedly used in a LOT of arcade machines. This is a partial list; numbers in brackets signify how many SN76489s are present:
</p><ul><li>Bank Panic (3)
</li><li>Champion Boxing
</li><li>Champion Pro Wrestling
</li><li>Gigas (4)
</li><li>Gigas Mark II (4)
</li><li>Free Kick
</li><li>Lady Bug (2)
</li><li>Mr. Do! (2)
</li><li>Mr. Do's Castle (4)
</li><li>Mr. Do's Wild Ride (4)
</li><li>Super Locomotive (2)
</li><li>Wonder Boy: Monster Land (2)
</li></ul><p class='vspace'>A clone of the SN76489 is included in the <a class='wikipedialink' href='http://en.wikipedia.org/wiki/Tandy%201000' title="Tandy 1000 on Wikipedia">Tandy 1000</a> home computer, for compatibility with the one in the <a class='wikipedialink' href='http://en.wikipedia.org/wiki/IBM%20PCjr' title="IBM PCjr on Wikipedia">IBM PCjr</a> of which it is itself a clone.
</p>
<div class='vspace'></div><h2><a name='AccessingTheSN76489FromSoftware' id='AccessingTheSN76489FromSoftware'></a> <a name='accessing' id='accessing'></a>Accessing the SN76489 from software</h2>
<p>The SN76489 has an 8-bit write-only data bus, so it is controlled in
software by writing bytes to it. How this is done depends on the system.
</p>
<div class='vspace'></div><ul><li>Sega Game 1000 (SG-1000)
</li><li>Sega Computer 3000 (SC-3000)
</li><li>Sega Master System (SMS)
</li><li>Sega Game Gear (GG)
</li><li>Sega Mega Drive/Genesis (in Master System compatibility mode)
<div class='indent'>The SN76489 can be accessed by writing to any I/O port between 0x40 and 0x7f, although officially only 0x7f was recommended. A few games write to 0x7e.
</div><div class='vspace'></div></li><li>Sega Mega Drive/Genesis
<div class='indent'>The SN76489 is memory-mapped to the 68000 CPU at location 0xc00011 (mirrored at 0xc00013, 0xc00015, 0xc00017) and the Z80 CPU at 0x7f11 (mirrored at 0x7f13, 0x7f15, 0x7f17).
</div><div class='vspace'></div></li><li>ColecoVision
</li><li>Coleco Adam?
<div class='indent'>The SN76489 is mapped to I/O port $ff.
</div><div class='vspace'></div></li><li>Tandy 1000
</li><li>IBM PCjr?
<div class='indent'>The NCR 8496 is mapped to I/O port(?) $c0.
</div><div class='vspace'></div></li><li>Other systems
<div class='indent'>Let me know :)
</div></li></ul><div class='vspace'></div><h2><a name='SN76489Registers' id='SN76489Registers'></a> <a name='registers' id='registers'></a>SN76489 registers</h2>
<p>The SN76489 has 8 "registers" - 4 x 4 bit volume registers, 3 x 10 bit
tone registers and 1 x 3 bit noise register. Of course, for hardware
reasons these may internally be wider.
</p>
<div class='vspace'></div>
<table border='1' ><tr ><th  align='center'>Channel</th><th  align='center'>Volume registers</th><th  align='center'>Tone &amp; noise registers</th></tr>
<tr ><td  align='center'>0</td><td  align='center'>Vol0</td><td  align='center'>Tone0</td></tr>
<tr ><td  align='center'>1</td><td  align='center'>Vol1</td><td  align='center'>Tone1</td></tr>
<tr ><td  align='center'>2</td><td  align='center'>Vol2</td><td  align='center'>Tone2</td></tr>
<tr ><td  align='center'>3</td><td  align='center'>Vol3</td><td  align='center'>Noise</td></tr>
</table>
<div class='vspace'></div><dl><dt>Volume registers</dt><dd>The value represents the attenuation of the output. Hence, %0000 is full volume and %1111 is silence.
<div class='vspace'></div></dd><dt>Tone registers</dt><dd>These give a counter reset value for the tone generators. Hence, low values give high frequencies and vice versa.
<div class='vspace'></div></dd><dt>Noise register</dt><dd>One bit selects the mode ("periodic" or "white") and the other two select a shift rate.
</dd></dl><p class='vspace'>It appears the initial state of these registers depends on the hardware:
</p><ul><li>Discrete chips seem to start with random values (an SC-3000 is reported to start with a tone before the chip is written to by the software).
</li><li>The Sega integrated versions seem to start initialised with zeroes in the tone/noise registers and ones in the volume registers (silence).
</li></ul><div class='vspace'></div><h3><a name='SN76489RegisterWrites' id='SN76489RegisterWrites'></a> <a name='writes' id='writes'></a>SN76489 register writes</h3>
<p>When a byte is written to the SN76489, it processes it as follows:
</p>
<p class='vspace'><strong>If bit 7 is 1 then the byte is a LATCH/DATA byte.</strong>
</p>
<div class='vspace'></div><pre class='escaped'>
  %1cctdddd
    |||````-- Data
    ||`------ Type
    ``------- Channel
</pre>
<p class='vspace'>Bits 6 and 5 (<code>cc</code>) give the channel to be latched, ALWAYS. This selects the row in the above table - %00 is channel 0, %01 is channel 1, %10 is channel 2, %11 is channel 3 as you might expect.<br />Bit 4 (<code>t</code>) determines whether to latch volume (1) or tone/noise (0) data - this gives the column.
</p>
<p class='vspace'>The remaining 4 bits (<code>dddd</code>) are placed into the low 4 bits of the relevant register. For the three-bit noise register, the highest bit is discarded.
</p>
<p class='vspace'><strong><em>The latched register is NEVER cleared by a data byte.</em></strong>
</p>
<p class='vspace'><strong>If bit 7 is 0 then the byte is a DATA byte.</strong>
</p>
<div class='vspace'></div><pre class='escaped'>
  %0-DDDDDD
    |``````-- Data
    `-------- Unused
</pre>
<p class='vspace'>If the currently latched register is a tone register then the low 6
bits of the byte (<code>DDDDDD</code>) are placed into the high 6 bits of the latched
register. If the latched register is less than 6 bits wide (ie. not one of the tone registers), instead the low bits are placed into the corresponding bits of the register, and any extra high bits are discarded.
</p>
<p class='vspace'>The data have the following meanings (described more fully later):
</p>
<div class='vspace'></div><dl><dt>Tone registers</dt><dd>      <code>DDDDDDdddd = cccccccccc</code>
</dd></dl><ul><li><code>DDDDDDdddd</code> gives the 10-bit half-wave counter reset value.
</li></ul><div class='vspace'></div><dl><dt>Volume registers</dt><dd>    <code>(DDDDDD)dddd = (--vvvv)vvvv</code>
</dd></dl><ul><li><code>dddd</code> gives the 4-bit volume value.
</li><li>If a data byte is written, the low 4 bits of <code>DDDDDD</code> update the 4-bit volume value. However, this is unnecessary.
</li></ul><div class='vspace'></div><dl><dt>Noise register</dt><dd>      <code>(DDDDDD)dddd = (---trr)-trr</code>
</dd></dl><ul><li>The low 2 bits of <code>dddd</code> select the shift rate and the next highest bit (bit 2) selects the mode (white (1) or "periodic" (0)).
</li><li>If a data byte is written, its low 3 bits update the shift rate and mode in the same way.
</li></ul><p class='vspace'>This means that the following data will have the following effect
(spacing added for clarity, hopefully):
</p>
<div class='vspace'></div><pre class='escaped'>
 %1 00 0 1110      Latch, channel 0, tone, data %1110
 %0 0  001111      Data %001111
</pre>
<p>Set channel 0 tone to %0011111110 = 0xfe (440Hz @ 3579545Hz clock)
</p>
<div class='vspace'></div><pre class='escaped'>
 %1 01 1 1111      Latch, channel 1, volume, data %1111
</pre>
<p>Set channel 1 volume to %1111 = 0xf (silent)
</p>
<div class='vspace'></div><pre class='escaped'>
 %1 10 1 1111      Latch, channel 2, volume, data %1111
 %0 0  000000      Data %000000
</pre>
<p>Set channel 2 volume to %1111 = 0xf (silent)
THEN update it to %0000 = 0x0 (full)
<strong><em>The data byte is NOT ignored.</em></strong> If it is, you will hear a sustained tone while reading a message box in Alex Kidd in Miracle World.
</p>
<div class='vspace'></div><pre class='escaped'>
 %1 11 0 0101      Latch, channel 3, noise, data %0101
</pre>
<p>Set noise register to %101 (white noise, medium shift rate)
</p>
<div class='vspace'></div><pre class='escaped'>
 %1 11 0 0101      Latch, channel 3, noise, data %0101
 %0 0  000100      Data %000100
</pre>
<p>Set noise register to %101 (white noise, medium shift rate)
THEN update it to %100 (white noise, high shift rate)
<strong><em>The data byte is NOT ignored.</em></strong> If it is, some games (e.g. Micro Machines) produce the wrong sound on their noise channel.
</p>
<p class='vspace'>Also of note is that the tone registers update immediately when a byte
is written; they do not wait until all 10 bits are written.
</p>
<div class='vspace'></div><table border='1' ><tr ><th  align='center'>Data written</th><th  align='center'>Tone0 contents</th></tr>
<tr ><td  align='left'><code>1 00 0 0000</code></td><td  align='left'><code>------0000</code></td></tr>
<tr ><td  align='left'><code>0 0  000000</code></td><td  align='left'><code>0000000000</code></td></tr>
<tr ><td  align='left'><code>1 00 0 1111</code></td><td  align='left'><code>0000001111</code></td></tr>
<tr ><td  align='left'><code>0 0  111111</code></td><td  align='left'><code>1111111111</code></td></tr>
</table><p><span style='font-size:83%'> - signifies an unknown bit (whatever was previously in the register)</span>
</p>
<p class='vspace'>There were a couple of ways to handle SN76489 writes in older, inaccurate emulators:
</p>
<div class='vspace'></div><ol><li>Latch only the tone registers, as above, and leave them latched when other types of data (volume, noise) are written. This gives a "squawk" effect on SMS Micro Machines' title screen, which drowns out the "eek".
<div class='vspace'></div></li><li>Latch tone registers as above, and "unlatch" when other types of data are written. When a data byte is written with it unlatched, the data is discarded. This fixes the "squawk" but leaves the "eek".
</li></ol><div class='vspace'></div><h2><a name='HowTheSN76489MakesSound' id='HowTheSN76489MakesSound'></a> <a name='soundgeneration' id='soundgeneration'></a>How the SN76489 makes sound</h2>
<p>This is already well documented, but I'll repeat it again with (hopefully) a more hardware-related perspective.
</p>
<p class='vspace'>The SN76489 is connected to a <a class='wikilink' href='http://www.smspower.org/Development/ClockRate?sid=2b8ee483b184ecd129938536061a6c98'>clock signal</a>, which is commonly 3579545Hz for NTSC systems and 3546893Hz for PAL/SECAM systems (these are based on the associated TV colour subcarrier frequencies, and are common master clock speeds for many systems). It divides this clock by 16 to get its internal clock. The datasheets specify a maximum of 4MHz.
</p>
<p class='vspace'>Some versions (specified as the SN76489N in the datasheets) instead have a divider of 2 and a maximum clock of 500kHz, giving an equivalent post-divide clock rate.
</p>
<p class='vspace'>For each channel (all 4) there is a 10 bit counter, and an output bit. Each clock cycle, the counter is decremented (if it is non-zero). If, after being decremented, it is zero, the following happens:
</p>
<div class='vspace'></div><h3><a name='ToneChannels' id='ToneChannels'></a> <a name='tonegeneration' id='tonegeneration'></a>Tone channels</h3>
<p>The counter is reset to the value currently in the corresponding
register (eg. Tone0 for channel 0). The output bit is flipped - if it is currently outputting 1, it changes to 0, and vice versa. This output is passed to the mixer (see below). The initial output value may be arbitrarily set.
</p>
<p class='vspace'>So, it produces a square wave output with wavelength twice the value in
the corresponding register (measured in clock ticks). The frequency of
this can be calculated by
</p>
<div class='vspace'></div><pre class='escaped'>
                        Input clock (Hz) (3579545)
   Frequency (Hz) = ----------------------------------
                     2 x register value x divider (16)
</pre>
<p class='vspace'>Example values for an NTSC-clocked chip are given and are
generally assumed throughout. Thus, for example, 0x0fe gives 440.4Hz.
</p>
<p class='vspace'>If the register value is zero or one then the output is a constant value of +1.
This is often used for sample playback on the SN76489.
</p>
<div class='vspace'></div><h4><a name='ToneRange' id='ToneRange'></a> Tone range</h4>
<p>The lowest possible tone, using register value $3ff, is 109Hz (assuming an input clock of 3579545Hz),
which corresponds to MIDI note A2 -10 cents.
</p>
<p class='vspace'>The highest possible tone, using register value $001, is 111861Hz,
which corresponds to MIDI note D10 -14 cents. However, in practice,
smoothing capacitors and other, perhaps less deliberate, imperfections
in the output mean that such a high note is not audible; in tests on an
SMS2, the highest note that gave any audible output was
register value $006, giving frequency 18643Hz (MIDI note A12 -12 cents).
Thus, there is effectively a range of 10 octaves.
</p>
<div class='vspace'></div><h3><a name='NoiseChannel' id='NoiseChannel'></a> <a name='noisegeneration' id='noisegeneration'></a>Noise channel</h3>
<p>The counter is reset according to the low 2 bits of the noise register
as follows:
</p>
<div class='vspace'></div>
<table border='1' ><tr ><td >Low 2 bits of register</td><td >Value counter is reset to</td></tr>
<tr ><td  align='center'>00</td><td  align='center'>0x10</td></tr>
<tr ><td  align='center'>01</td><td  align='center'>0x20</td></tr>
<tr ><td  align='center'>10</td><td  align='center'>0x40</td></tr>
<tr ><td  align='center'>11</td><td  align='center'>Tone2</td></tr>
</table>
<p class='vspace'>As with the tone channels, the output bit is toggled between 0 and 1. However, this is not sent to the mixer, but to a "linear feedback
shift register" (LFSR), which can generate noise or act as a divider.
</p>
<div class='vspace'></div><h4><a name='TheLinearFeedbackShiftRegister' id='TheLinearFeedbackShiftRegister'></a> <a name='lfsr' id='lfsr'></a>The Linear Feedback Shift Register</h4>
<p>The LFSR is an array of either 15 or 16 bits, depending on the chip
version; a 16-bit version can give the same output as a 15-bit one with
adjustment of parameters.
</p>
<p class='vspace'>When its input changes from 0 to 1 (ie. only <strong>once</strong> for every two times
the related counter reaches zero), the array is shifted by one bit; the
direction doesn't matter, it just changes what numbers you use, so I
will arbitrarily say it shifts right. The bit that is shifted off the
end (either 0 or 1) is output to the mixer.
</p>
<div class='vspace'></div><div  style='text-align: center;'><img src='../uploads/Development/lfsr-overview.png' alt='' title='' /></div>
<p class='vspace'>The input bit is determined by an XOR feedback network. There are two
types: an external network, where the XOR gates are external to the
shift register, and internal, where they are between bits. Both are
discussed below. Certain bits are used as inputs to the XOR gates;
these are the "tapped" bits. An n-bit shift register can generate
pseudo-random sequences with periodicity up to 2<sup>n</sup> - 1, depending on
the tapped bits.
</p>
<p class='vspace'>The external LFSR type is discussed below.
</p>
<p class='vspace'>I will add more on the internal LFSR later - <a class='forumuserlink' href='http://www.smspower.org/forums/profile.php?mode=viewprofile&u=5&amp;sid=2b8ee483b184ecd129938536061a6c98'>Maxim</a> June 04, 2005, at 08:09 AM~
</p>
<p class='vspace'><strong>For white noise (Noise register bit 2 = 1):</strong>
</p>
<p class='vspace'>For the SMS (1 and 2), Genesis and Game Gear, the tapped bits are bits
0 and 3 ($0009), fed back into bit 15. For the SG-1000, OMV, SC-3000H,
BBC Micro and Colecovision, the tapped bits are bits 0 and 1 ($0003),
fed back into bit 14. For the Tandy 1000, the tapped bits are bits 0 
and 4 ($0011), fed back into bit 14.
</p>
<p class='vspace'>I would like to confirm the bit pattern for other systems, please
contact me if you can help by running/coding homebrew code on a real
system and sampling the sound. - <a class='forumuserlink' href='http://www.smspower.org/forums/profile.php?mode=viewprofile&u=5&amp;sid=2b8ee483b184ecd129938536061a6c98'>Maxim</a>
</p>
<p class='vspace'>Example (SMS/GG):
</p>
<div class='vspace'></div><div  style='text-align: center;'><img src='../uploads/Development/lfsr-whitenoise.png' alt='' title='' /></div>
<div class='vspace'></div><div  style='text-align: center;'><img src='../uploads/Development/lfsr-result.png' alt='' title='' /></div>
<p class='vspace'>The output bit patterns are shown graphically below. (Red pixels are
used to pad to rectangular sizes.) Click to download the bitpatterns,
padded to 8 bits.
</p>
<div class='vspace'></div>
<table border='0' width='100%' ><tr ><td  align='center'><a class='attachlink' href='http://www.smspower.org/uploads/Development/SN76489WhiteNoise.zip?sid=2b8ee483b184ecd129938536061a6c98'><img src='../uploads/Development/SN76489WhiteNoise.png' alt='' /></a><br clear='all' />SN76489 white noise</td><td  align='center'><a class='attachlink' href='http://www.smspower.org/uploads/Development/SegaVDPWhiteNoise.zip?sid=2b8ee483b184ecd129938536061a6c98'><img src='../uploads/Development/SegaVDPWhiteNoise.png' alt='' /></a><br clear='all' />Sega VDP white noise</td></tr>
</table>
<p class='vspace'><strong>For "periodic noise" (Noise register bit 2 = 0):</strong>
</p>
<p class='vspace'>For all variants, only bit 0 is tapped, ie. the output bit
is also the input bit. The effect of this is to output the contents of
the shift register in loop of the same length (16 bits for the SMS (1
and 2), Genesis and Game Gear, 15 bits for SG-1000, OMV, BBC Micro,
SC-3000H, ColecoVision and Tandy 1000; other systems need investigation).
</p>
<p class='vspace'>When the noise register is written to, the shift register is reset,
such that all bits are zero except for the highest bit. This will
make the "periodic noise" output a 1/16th (or 1/15th) duty cycle, and is
important as it also affects the sound of white noise.
</p>
<p class='vspace'>Thus, the output in "periodic noise" mode will also be at a fraction of the frequency of the underlying driving signal (discussed above). For a 16-bit shift register and a 3759545Hz input clock, this gives "periodic noise" a frequency range of 6.8Hz to 6991Hz (when using tone channel 2 as the driving signal, with register values $3ff and $001 respectively), a range of 10 octaves (MIDI notes A-2 to A8), shifted 4 octaves down from the regular tone range.
</p>
<div class='vspace'></div><div  style='text-align: center;'><img src='../uploads/Development/lfsr-periodicnoise.png' alt='' title='' /></div>
<div class='vspace'></div><div  style='text-align: center;'><img src='../uploads/Development/lfsr-result.png' alt='' title='' /></div>
<p class='vspace'>Note that this "periodic noise", as it is called in the original
chip's documentation, is in fact not periodic noise as it is
defined elsewhere (white noise with a configurable periodicity); it
is a duty cycle modifier. For this reason, throughout this document
it is always referred to with quotes.
</p>
<p class='vspace'><a name='outputinversion' id='outputinversion'></a>
</p><h4><a name='OutputInversion' id='OutputInversion'></a> Output inversion</h4>
<p>Some systems seem to produce inverted output, which can confuse matters
when reverse-engineering the noise generator as <code>1</code>s become <code>0</code>s
and vice versa. This is why you may see conflicting information from
other sources. It is of note that a 16-bit LFSR with white noise
feedback pattern $0006 can be inverted by using feedback pattern $8005
instead.
</p>
<p class='vspace'><a name='lfsrimpl' id='lfsrimpl'></a>
</p><h4><a name='AnImplementationOfTheNoiseShiftRegister' id='AnImplementationOfTheNoiseShiftRegister'></a> An implementation of the noise shift register</h4>

<div class='sourceblock ' id='sourceblock1'>
  <div class='sourceblocktext'><div class="c" style="font-family:monospace;">&nbsp; &nbsp; &nbsp;ShiftRegister<span class="sy0">=</span><span class="br0">&#40;</span>ShiftRegister<span class="sy0">&gt;&gt;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">|</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#40;</span><span class="br0">&#40;</span>WhiteNoise<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">?</span>parity<span class="br0">&#40;</span>ShiftRegister<span class="sy0">&amp;</span>TappedBits<span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="sy0">:</span>ShiftRegister<span class="sy0">&amp;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">&lt;&lt;</span><span class="nu0">15</span><span class="br0">&#41;</span><span class="sy0">;</span><br />
&nbsp; &nbsp; &nbsp;Output<span class="sy0">=</span>ShiftRegister<span class="sy0">&amp;</span><span class="nu0">1</span><span class="sy0">;</span></div></div>
  <div class='sourceblocklink'><a href='http://www.smspower.org/Development/SN76489?action=sourceblock&amp;num=1&amp;sid=2b8ee483b184ecd129938536061a6c98' type='text/plain'>Get Code</a></div>
</div>

<p class='vspace'>where <code>parity()</code> is a function that returns 1 if its (16-bit unsigned int)
parameter has an odd number of bits set and 0 otherwise; and TappedBits
depends on the system being emulated (and so should be a variable, not a
constant, for any emulation that is supposed to handle more than one of
the known feedback types), for example 0x0009 for the Master System
(bits 0 and 3 set). Here is a fast SIMD implementaion of 16-bit
<code>parity()</code>:
</p>
<div class='vspace'></div>
<div class='sourceblock ' id='sourceblock2'>
  <div class='sourceblocktext'><div class="c" style="font-family:monospace;">&nbsp;<span class="kw4">int</span> parity<span class="br0">&#40;</span><span class="kw4">int</span> val<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp;val<span class="sy0">^=</span>val<span class="sy0">&gt;&gt;</span><span class="nu0">8</span><span class="sy0">;</span><br />
&nbsp; &nbsp; &nbsp;val<span class="sy0">^=</span>val<span class="sy0">&gt;&gt;</span><span class="nu0">4</span><span class="sy0">;</span><br />
&nbsp; &nbsp; &nbsp;val<span class="sy0">^=</span>val<span class="sy0">&gt;&gt;</span><span class="nu0">2</span><span class="sy0">;</span><br />
&nbsp; &nbsp; &nbsp;val<span class="sy0">^=</span>val<span class="sy0">&gt;&gt;</span><span class="nu0">1</span><span class="sy0">;</span><br />
&nbsp; &nbsp; &nbsp;<span class="kw1">return</span> val<span class="sy0">&amp;</span><span class="nu0">1</span><span class="sy0">;</span><br />
&nbsp;<span class="br0">&#125;</span><span class="sy0">;</span></div></div>
  <div class='sourceblocklink'><a href='http://www.smspower.org/Development/SN76489?action=sourceblock&amp;num=2&amp;sid=2b8ee483b184ecd129938536061a6c98' type='text/plain'>Get Code</a></div>
</div>

<p class='vspace'>Thanks go to Dave (finaldave) for coming up with this. You may get
faster results with expressions tailored to certain common feedback
patterns, and of course if you can use assembler to access a CPU's
built-in parity checking instructions/flags.
</p>
<div class='vspace'></div><h3><a name='Volumeattenuation' id='Volumeattenuation'></a> <a name='mixer' id='mixer'></a>Volume/attenuation</h3>
<p>The mixer then multiplies each channel's output by the corresponding
volume (or, equivalently, applies the corresponding attenuation), and
sums them. The result is output to an amplifier which outputs them at
suitable levels for audio.
</p>
<p class='vspace'>The SN76489 attenuates the volume by 2dB for each step in the volume
register. This is almost completely meaningless to most people, so
here's an explanation.
</p>
<p class='vspace'>The decibel scale is a logarithmic comparative scale of power. One bel
is defined as
</p>
<div class='vspace'></div><pre class='escaped'>
     power 1
 log -------
     power 2
</pre>
<p class='vspace'>Whether it's positive or negative depends on which way around you put
power 1 and power 2. The log is to base 10.
</p>
<p class='vspace'>However, this tends to give values that are small and fiddly to deal
with, so the standard is to quote values as decibels (1 decibel = 10
bels). Thus,
</p>
<div class='vspace'></div><pre class='escaped'>
                      power 1
    decibels = 10 log -------
                      power 2
</pre>
<p class='vspace'>One decibel is just above the threshold at which most people will notice
a change in volume.
</p>
<p class='vspace'>In most cases we are not dealing with power, we are instead dealing with
voltages in the form of the output voltage being used to drive a
speaker. You may remember from school that power is proportional to the
square of the voltage. Thus, applying a little mathematical knowledge:
</p>
<div class='vspace'></div><pre class='escaped'>
                      (voltage 1)'^2^'          voltage 1
    decibels = 10 log ------------ = 20 log ---------
                      (voltage 2)'^2^'          voltage 2
</pre>
<p class='vspace'>Rearranging,
</p>
<div class='vspace'></div><pre class='escaped'>
    voltage 1     (decibels / 20)
    --------- = 10
    voltage 2
</pre>
<p class='vspace'>Thus, a drop of 2dB will correspond to a ratio of 10<sup>-0.1</sup> = 0.79432823
between the current and previous output values. This can be used to
build an output table, for example:
</p>
<div class='vspace'></div>
<div class='sourceblock ' id='sourceblock3'>
  <div class='sourceblocktext'><div class="c" style="font-family:monospace;">&nbsp;<span class="kw4">int</span> volume_table<span class="br0">&#91;</span><span class="nu0">16</span><span class="br0">&#93;</span><span class="sy0">=</span><span class="br0">&#123;</span><br />
&nbsp; &nbsp;<span class="nu0">32767</span><span class="sy0">,</span> <span class="nu0">26028</span><span class="sy0">,</span> <span class="nu0">20675</span><span class="sy0">,</span> <span class="nu0">16422</span><span class="sy0">,</span> <span class="nu0">13045</span><span class="sy0">,</span> <span class="nu0">10362</span><span class="sy0">,</span> &nbsp;<span class="nu0">8231</span><span class="sy0">,</span> &nbsp;<span class="nu0">6568</span><span class="sy0">,</span><br />
&nbsp; &nbsp; <span class="nu0">5193</span><span class="sy0">,</span> &nbsp;<span class="nu0">4125</span><span class="sy0">,</span> &nbsp;<span class="nu0">3277</span><span class="sy0">,</span> &nbsp;<span class="nu0">2603</span><span class="sy0">,</span> &nbsp;<span class="nu0">2067</span><span class="sy0">,</span> &nbsp;<span class="nu0">1642</span><span class="sy0">,</span> &nbsp;<span class="nu0">1304</span><span class="sy0">,</span> &nbsp; &nbsp; <span class="nu0">0</span><br />
&nbsp;<span class="br0">&#125;</span><span class="sy0">;</span></div></div>
  <div class='sourceblocklink'><a href='http://www.smspower.org/Development/SN76489?action=sourceblock&amp;num=3&amp;sid=2b8ee483b184ecd129938536061a6c98' type='text/plain'>Get Code</a></div>
</div>

<p class='vspace'>These correspond to volume register values 0x0 to 0xf, in that order.
</p>
<p class='vspace'>The last value is fixed to zero, regardless of what the previous value
was, to allow silence to be output.
</p>
<p class='vspace'>Depending on later hardware in the chain between the SN76489 and your
ears, there may be some distortion introduced. My tests with an SMS and
a TV card found the highest three volume levels to be clipped, for
example.
</p>
<div class='vspace'></div><h2><a name='TheImperfectSN76489' id='TheImperfectSN76489'></a> <a name='imperfect' id='imperfect'></a>The imperfect SN76489</h2>
<p>Real components aren't perfect. The output of the SN76489 in its
various implementations can be severely affected by this.
</p>
<p class='vspace'>Wherever a voltage (output) is artificially held away from zero, there
will be leakage and the actual output will decay towards zero at a rate
proportional to the offset from zero:
</p>
<div class='vspace'></div><pre class='escaped'>
    dV
    -- = -kV
    dt
</pre>
<p>where <code>k</code> is a constant
</p>
<p class='vspace'>This affects the output from the SN76489 both internally (for the outputs from the wave generators to the mixer) and externally (for the output of the mixer).
</p>
<p class='vspace'>The effect on the tone channels is to change the shape of their output
waves from this:
</p>
<div class='vspace'></div><div  style='text-align: center;'><img src='../uploads/Development/squarewave.png' alt='' title='' /></div>
<p class='vspace'><strong><em>Note: this diagram needs to be updated. The input seems to actually be 0/1, but the output is centred around zero.</em></strong>
</p>
<p class='vspace'>to something like this:
</p>
<div class='vspace'></div><div  style='text-align: center;'><img src='../uploads/Development/leakysquarewave.png' alt='' title='' /></div>
<p class='vspace'><strong><em>This needs to be replaced with a real output sample, for authenticity and accuracy.</em></strong>
</p>
<p class='vspace'>If the tone register value is large enough, they will decay close to
zero.
</p>
<p class='vspace'>If the tone register value is zero, the constant offset output will
just decay to zero. However, whenever the volume of the output is
changed, the constant offset is restored. This allows speech effects.
</p>
<p class='vspace'>The effect on the noise generator's output is this:
</p>
<p class='vspace'>Signal generator output, for reference:
</p>
<div class='vspace'></div><div  style='text-align: center;'><img src='../uploads/Development/noise-signal.png' alt='' title='' /></div>
<p class='vspace'>Perfect output (assuming output bit pattern of 101001):
</p>
<div class='vspace'></div><div  style='text-align: center;'><img src='../uploads/Development/noise-perfect.png' alt='' title='' /></div>
<p class='vspace'>Actual output:
</p>
<div class='vspace'></div><div  style='text-align: center;'><img src='../uploads/Development/noise-leaky.png' alt='' title='' /></div>
<p class='vspace'><strong><em>This needs to be replaced with a real output sample, for authenticity and accuracy.</em></strong>
</p>
<p class='vspace'>The empirical effects are:
</p><ul><li>The sound of tones is changed very slightly
</li><li>Noise sounds a bit louder
</li><li>Voices sound slightly different
</li></ul><p class='vspace'>Some games were programmed with the SN76489 considered to be a perfect
device, for example for PCM voice effects.
</p>
<div class='vspace'></div><h3><a name='EmulatingImperfection' id='EmulatingImperfection'></a> <a name='emulating' id='emulating'></a>Emulating imperfection</h3>
<p>In most cases, emulating the imperfections of the SN76489 is processor-intensive and difficult to get quantitatively correct. However, a "perfect" emulation is likely to be sufficiently far removed from the actual device to give output that is noticeably "wrong".
</p>
<p class='vspace'>The tone channels are an excellent example of this. Because of the voltage decay mentioned above, their outputs degrade from a rectangular wave with positions 0 and +1 to one that more closely resembles one with positions -0.5 and +0.5, with some curvature. This is because the average value of the output bit is 0.5, and voltage decay will lead to this average offset from zero disappearing. Thus, emulating the tone channel outputs as -0.5/+0.5 instead of 0/+1 gives a much more pleasing representation.
</p>
<p class='vspace'>The noise channel can be emulated the same way, or it can be left as 0/+1; because of its randomness, the effect is less. However, for "periodic" noise, where the average value of the output bit is 1/16 or 1/15, the latter case is a better approximation.
</p>
<div class='vspace'></div><h2><a name='PlayingSamplesOnThePSG' id='PlayingSamplesOnThePSG'></a> Playing samples on the PSG</h2>
<p>This is for the reference of those wishing to put sample playback in
their demos, and for those whose sound core doesn't do voices. Emulator authors may wish to add implementation suggestions.
</p>
<p class='vspace'>Sample playback is possible on the <a class='selflink' href='http://www.smspower.org/Development/SN76489?sid=2b8ee483b184ecd129938536061a6c98'>SN76489</a> but not the <a class='wikilink' href='http://www.smspower.org/Development/YM2413?sid=2b8ee483b184ecd129938536061a6c98'>YM2413</a> FM chip.
</p>
<p class='vspace'>It is possible to play samples in two ways:
</p>
<div class='vspace'></div><h3><a name='PulseCodeModulation' id='PulseCodeModulation'></a> Pulse Code Modulation</h3>
<p>This is the usual way to store, process and output waves. The data is in the form of voltages (corresponding to the desired speaker position which in turn gives corresponding pressure waves in the air) which are stored digitally, often as 16-bit or 8-bit signed numbers.
</p>
<p class='vspace'>On the SN76489, this is <em>usually</em> done by:
</p>
<div class='vspace'></div><ol><li>Setting all 3 tone channels to frequency 0x000
</li><li>At rapid, closely timed intervals, setting the output volume of all 3 to values stored in ROM.
</li></ol><p class='vspace'>In other words, the volume setting is used as a 4-bit DAC. All three
tone channels are usually used together to get maximum volume.
</p>
<p class='vspace'>The problem is that the <a class='wikilink' href='http://www.smspower.org/Development/PSG#volume?sid=2b8ee483b184ecd129938536061a6c98'>output levels</a> of the SN76489 are not linearly
scaled:
</p>
<div class='vspace'></div><pre class='escaped'>
 |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |Linear
 | ||||| | | |  |   |    |     |       |         |           |SN76489
</pre>
<p class='vspace'>The source wave could be prepared with this in mind, using some
specialised software, but I am not aware of any consumer-level wave
editor capable of doing this. However, ignoring this and outputting
"normal" linear 4-bit data will generally sound good, but
significantly quieter than it would be on a linear scale.
</p>
<p class='vspace'>The quality depends on the rate at which data is sent to the chip; on
most systems, the limit is more likely to be memory space than CPU
speed (8kHz 4-bit audio will fit 4.1 seconds into 16KB).
</p>
<div class='vspace'></div><h4><a name='AdvancedPCM' id='AdvancedPCM'></a> "Advanced" PCM</h4>
<p>Instead of setting the volumes on all three tone channels in unison, it is possible to instead set the levels on all three independently. In theory this allows for 816 unique output levels, although they are not distributed regularly or linearly, and are concentrated in the lower half of the waveform; this is equivalent to about 9.7 bits of resolution (but "costs" 12 bits per sample for storage).
</p>
<p class='vspace'>If only two channels are used (so the source can be 8 bits per sample rather than 12, to save ROM space), 136 unique levels are possible (7.1 bits of resolution), which seems to be a better trade-off. By outputting 4 bits to two channels and the other 4 bits to the third, the volume range for this 8-bit variation can be boosted at the expense of the uniformity of coverage.
</p>
<p class='vspace'>No known software uses this technique.
</p>
<div class='vspace'></div><h3><a name='PulseWidthModulation' id='PulseWidthModulation'></a> Pulse Width Modulation</h3>
<p>This works by outputting pulses at constant volume whose pattern
gives the effect of different frequencies and volumes. This is also
how samples are played on PC internal speakers and some CD players.
On the SN76489, this is done by:
</p>
<div class='vspace'></div><ol><li>Setting all 3 tone channels to frequency 0x000
</li><li>At rapid, closely timed intervals, setting the output volume of all 3 to either 0xf (off) or 0x0 (full) depending on values stored in ROM.
</li></ol><p class='vspace'>All three channels are used to get maximum volume.
</p>
<p class='vspace'>This is equivalent to dithering the sound to one bit per sample
instead of however many bits per sample are in the input data. Thus,
an 8kHz 8-bit sample can be output as a 64kHz 1-bit sample and it
will sound much the same. It is somewhat dependent on the output
frequency being above the range of hearing.
</p>
<p class='vspace'>The advantage of this is that it allows for a sample based on a
linear PCM scale to be output accurately on the SN76489 (allowing
for louder sounds) and it can potentially output any bitdepth source
audio. The disadvantage is that, with a limited output rate, one is
forced to trade off between the bitdepth and sampling rate of the
input sample: with a maximum output rate of 20kHz, for example, one
may choose a 6.67kHz 3-bit source sample, a 5kHz 4-bit source sample,
etc. This can be severely limiting for the quality. (Note: the output limit, 20kHz in this example, has yet to be determined for the SMS and will vary depending on how the data is encoded and the playback efficiency.)
</p>
<p class='vspace'>On the Master System, PWM is not very good quality (often the sound
is unintelligible, for example Alex Kidd: the Lost Stars' "Find/I'm
the Miracle Ball" and Shooting Gallery's "Perfect"), but it is the
loudest way to play samples.
</p>
<div class='vspace'></div><h2><a name='GameGearStereoExtension' id='GameGearStereoExtension'></a> Game Gear stereo extension</h2>
<p>When a byte is written to port 0x06 on the Game Gear, the <a class='wikilink' href='http://www.smspower.org/Development/PSG?sid=2b8ee483b184ecd129938536061a6c98'>PSG</a>
output is affected as follows:
</p>
<div class='vspace'></div>
<table border='1' ><tr ><th >Bit</th><th >Channel</th><th >Side</th></tr>
<tr ><td  align='center'>0</td><td  align='center'>0</td><td  align='center'>Right</td></tr>
<tr ><td  align='center'>1</td><td  align='center'>1</td><td  align='center'>Right</td></tr>
<tr ><td  align='center'>2</td><td  align='center'>2</td><td  align='center'>Right</td></tr>
<tr ><td  align='center'>3</td><td  align='center'>3</td><td  align='center'>Right</td></tr>
<tr ><td  align='center'>4</td><td  align='center'>0</td><td  align='center'>Left</td></tr>
<tr ><td  align='center'>5</td><td  align='center'>1</td><td  align='center'>Left</td></tr>
<tr ><td  align='center'>6</td><td  align='center'>2</td><td  align='center'>Left</td></tr>
<tr ><td  align='center'>7</td><td  align='center'>3</td><td  align='center'>Left</td></tr>
</table>
<p class='vspace'>If a bit is set, the corresponding channel is output to the
corresponding side. So, <code>0xff</code> outputs all channels to all sides, <code>0xf0</code>
outputs to the left side only, etc.
</p>
<p class='vspace'><strong>History</strong>
</p>
<div class='vspace'></div><dl><dt>6/6/2002</dt><dd>Clarification that SN76489 tones update immediately after latch byte. Use of 2-stage volume writes found.
</dd><dt>22/8/2002</dt><dd>Charles MacDonald sampled GG and Genesis noise for me, it's the same bit pattern as SMS noise.
</dd><dt>20/10/2002</dt><dd>Fixed some typos.
</dd><dt>21/3/2003</dt><dd>Added SC-3000H noise feedback pattern, thanks to Charles MacDonald for getting the data for me.
</dd><dt>21/4/2003</dt><dd>Charles MacDonald sampled SMS1 noise, it's the same bit pattern as the SMS2, GG and Genesis.
</dd><dt>27/4/2005</dt><dd>Added sections on 15-bit shift registers and volume/attenuation. Most sections tweaked, clarified, corrected and extended.
</dd><dt>1/5/2005</dt><dd>Added to Wiki.
</dd><dt>21/5/2005</dt><dd>Added some sightings.
</dd><dt>23/5/2005</dt><dd>Added ColecoVision noise information (same as BBC Micro), thanks to Daniel Bienvenu.
</dd><dt>12/11/2005</dt><dd>Added OMV information, and clarified 15/16 bit shift register differences.
</dd></dl><p class='vspace'><strong>Credits</strong>
</p>
<p class='vspace'>Based on research by <a class='forumuserlink' href='http://www.smspower.org/forums/profile.php?mode=viewprofile&u=5&amp;sid=2b8ee483b184ecd129938536061a6c98'>Maxim</a>, after initial results by John Kortink. BBC Micro noise data thanks to John Kortink. SMS1, Game Gear, Genesis and SC-3000H noise data thanks to <a class='forumuserlink' href='http://www.smspower.org/forums/profile.php?mode=viewprofile&u=9&amp;sid=2b8ee483b184ecd129938536061a6c98'>Charles MacDonald</a>. ColecoVision noise data thanks to Daniel Bienvenu.
</p><hr />
<div class='fpltemplate'><ul><li><a class='wikilink' href='http://www.smspower.org/Development/Sound-Index?sid=2b8ee483b184ecd129938536061a6c98'>Back to Sound index</a>
</li></ul>
</div>
<ul><li><a class='wikilink' href='http://www.smspower.org/Development/Index?sid=2b8ee483b184ecd129938536061a6c98'>Back to Development index</a>
</li></ul><div class='vspace'></div>
</div>

<hr>
<!-- AddThis Button BEGIN -->
<div class="addthis_toolbox addthis_default_style ">
<a class="addthis_button_preferred_1"></a>
<a class="addthis_button_preferred_2"></a>
<a class="addthis_button_preferred_3"></a>
<a class="addthis_button_preferred_4"></a>
<a class="addthis_button_compact"></a>
<a class="addthis_counter addthis_bubble_style"></a>
</div>
<script type="text/javascript">var addthis_config = {"data_track_clickback":true};</script>
<script type="text/javascript" src="http://s7.addthis.com/js/250/addthis_widget.js#pubid=ra-4d6b8488365a9b75"></script>
<!-- AddThis Button END -->
	</div>
<!--PageFooterFmt-->
	<div><a href='SN76489#top'><img src='../uploads/Site/ReturnToTop.gif' alt='' /></a><br /><a href='SN76489#top'>Return to top</a><br /><span style='font-size:69%'>0.539s</span></div>

<!--/PageFooterFmt-->
<!--HTMLFooter-->
<script src='http://www.google-analytics.com/ga.js' type='text/javascript'></script>
<script type='text/javascript'>
try {
var pageTracker = _gat._getTracker('UA-11623675-1');
pageTracker._trackPageview();
} catch(err) {}
</script>
</body>
</html>